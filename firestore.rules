rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ====== Helper Functions ======
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }
    
    function isValidString(value, minLength, maxLength) {
      return value is string &&
             value.size() >= minLength &&
             value.size() <= maxLength;
    }
    
    function isValidEmail(email) {
      return email is string &&
             email.matches('.*@.*\\..*') &&
             email.size() <= 254;
    }
    
    function isAdultUser() {
      // For dating app - ensure user is 18+
      // This should be verified during signup and stored in custom claims
      return isSignedIn() && 
             request.auth.token.get('isAdult', false) == true;
    }
    
    function isValidReview() {
      return isSignedIn() &&
        request.resource.data.keys().hasAll(['title', 'content', 'authorId', 'createdAt', 'category', 'rating']) &&
        request.resource.data.authorId == request.auth.uid &&
        isValidString(request.resource.data.title, 1, 200) &&
        isValidString(request.resource.data.content, 10, 5000) &&
        isValidString(request.resource.data.category, 1, 50) &&
        request.resource.data.rating is number &&
        request.resource.data.rating >= 1 &&
        request.resource.data.rating <= 5;
    }

    // ====== User Profiles ======
    match /users/{userId} {
      // Anyone authenticated can read basic profile info
      allow read: if isSignedIn();
      
      // Users can only create their own profile
      allow create: if isOwner(userId) &&
        request.resource.data.keys().hasAll(['email', 'username', 'createdAt']) &&
        (request.resource.data.get('email', '') == '' || 
         request.resource.data.email == request.auth.token.email) &&
        isValidString(request.resource.data.username, 3, 30);
      
      // Users can only update their own profile
      allow update: if isOwner(userId) &&
        // Can't change email or userId
        request.resource.data.email == resource.data.email &&
        request.resource.data.get('id', userId) == userId &&
        // Validate username if changed
        (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['username']) ||
         isValidString(request.resource.data.username, 3, 30));
      
      // Soft delete only through cloud functions
      allow delete: if false;
    }
    
    // ====== User Private Data ======
    match /users/{userId}/private/{document=**} {
      allow read, write: if isOwner(userId);
    }
    
    // ====== Reviews (Dating Reviews) ======
    match /reviews/{reviewId} {
      // Public can read all reviews
      allow read: if true;
      
      // Only authenticated adult users can create reviews
      allow create: if isValidReview();
      
      // Authors can update their own reviews
      allow update: if isSignedIn() && 
        resource.data.authorId == request.auth.uid &&
        request.resource.data.authorId == resource.data.authorId && // Can't change author
        isValidString(request.resource.data.content, 10, 5000);
      
      // Authors can delete their own reviews
      allow delete: if isSignedIn() && 
        resource.data.authorId == request.auth.uid;
    }
    
    // ====== Review Comments ======
    match /reviews/{reviewId}/comments/{commentId} {
      allow read: if true;
      
      allow create: if isSignedIn() &&
        request.resource.data.authorId == request.auth.uid &&
        isValidString(request.resource.data.content, 1, 1000) &&
        request.resource.data.keys().hasAll(['content', 'authorId', 'createdAt']);
      
      allow update: if isSignedIn() && 
        resource.data.authorId == request.auth.uid &&
        request.resource.data.authorId == resource.data.authorId;
      
      allow delete: if isSignedIn() && 
        resource.data.authorId == request.auth.uid;
    }
    
    // ====== Chat Rooms ======
    match /chatRooms/{roomId} {
      // Members can read their rooms
      allow read: if isSignedIn() && 
        (request.auth.uid in resource.data.members ||
         resource.data.get('isPublic', false) == true);
      
      // Create room with at least 2 members including creator
      allow create: if isSignedIn() &&
        request.auth.uid in request.resource.data.members &&
        request.resource.data.members.size() >= 2 &&
        request.resource.data.members.size() <= 100 &&
        isValidString(request.resource.data.name, 1, 100);
      
      // Members can update room info
      allow update: if isSignedIn() && 
        request.auth.uid in resource.data.members &&
        // Can't remove themselves from members list via update
        request.auth.uid in request.resource.data.members;
      
      // Archive instead of delete
      allow delete: if false;
    }
    
    // ====== Chat Messages ======
    match /chatRooms/{roomId}/messages/{messageId} {
      // Room members can read messages
      allow read: if isSignedIn() &&
        request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.members;
      
      // Room members can send messages
      allow create: if isSignedIn() &&
        request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.members &&
        request.resource.data.senderId == request.auth.uid &&
        isValidString(request.resource.data.content, 1, 2000) &&
        request.resource.data.keys().hasAll(['content', 'senderId', 'createdAt']);
      
      // Senders can edit their own messages
      allow update: if isSignedIn() && 
        resource.data.senderId == request.auth.uid &&
        request.resource.data.senderId == resource.data.senderId;
      
      // Soft delete only
      allow delete: if false;
    }
    
    // ====== Notifications ======
    match /notifications/{userId}/items/{notificationId} {
      // Users can read their own notifications
      allow read: if isOwner(userId);
      
      // Only server can create notifications
      allow create: if false;
      
      // Users can mark notifications as read
      allow update: if isOwner(userId) && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      
      // Users can delete their own notifications
      allow delete: if isOwner(userId);
    }
    
    // ====== Content Reports ======
    match /reports/{reportId} {
      // Only admins can read reports (via Cloud Functions)
      allow read: if false;
      
      // Authenticated users can report content
      allow create: if isSignedIn() &&
        request.resource.data.reporterId == request.auth.uid &&
        request.resource.data.keys().hasAll(['type', 'targetId', 'reason', 'createdAt']) &&
        isValidString(request.resource.data.type, 1, 20) &&
        isValidString(request.resource.data.targetId, 1, 100) &&
        isValidString(request.resource.data.reason, 10, 500);
      
      // No updates or deletes allowed
      allow update, delete: if false;
    }
    
    // ====== User Settings ======
    match /userSettings/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // ====== Public Data ======
    match /public/{document=**} {
      // Anyone can read public data
      allow read: if true;
      // Only admin via Cloud Functions can write
      allow write: if false;
    }
    
    // ====== Rate Limiting ======
    match /rateLimits/{userId}/actions/{action} {
      // Users can read/write their own rate limit data
      allow read, write: if isOwner(userId);
    }
    
    // ====== Deny All Other Access ======
    match /{document=**} {
      allow read, write: if false;
    }
  }
}